Now please write me a short documentation with the following points:
	Application description: 2 paragraphs, 4-10 Sentences.
	Information on how to run the developed application locally.
	At least 10 examples of how to use the developed endpoint.
ChatGPT
Documentation
Application Description
The Country Service application is a RESTful web service built with Spring Boot, designed to provide an interface for fetching and filtering information about countries. It serves as a middleman between the client and the https://restcountries.com/v3.1/all API. The application fetches all countries data from this API, filters it based on parameters such as country name, population, sorting, and record limits, and returns the refined data to the client. The service is especially useful for developers and businesses looking to leverage country-related data without having to implement their own complex filtering and sorting logic.

Built with a modular and scalable architecture, this application separates the concerns into different layers including controllers, services, and utility classes. This separation makes the application easier to test and maintain. Furthermore, it uses the Spring Framework's RestTemplate for making API calls, and employs Java Streams for filtering and sorting, making it both robust and performant.

How to Run the Application Locally
Clone the repository to your local machine.
Navigate to the project directory.
Run mvn clean install to build the project and install dependencies.
Run mvn spring-boot:run to start the application.
The service should now be running on http://localhost:8080.
Examples of Using the Developed Endpoint
Assuming the endpoint is /api/countries, here are some examples of how to use it:

Fetch all countries:
GET http://localhost:8080/api/countries

Fetch countries by name (case insensitive):
GET http://localhost:8080/api/countries?name=er

Fetch countries with population less than 10 million:
GET http://localhost:8080/api/countries?population=10

Fetch countries and sort them in ascending order by name:
GET http://localhost:8080/api/countries?sort=ascend

Fetch countries and sort them in descending order by name:
GET http://localhost:8080/api/countries?sort=descend

Fetch first 5 countries:
GET http://localhost:8080/api/countries?limit=5

Fetch countries by name and population:
GET http://localhost:8080/api/countries?name=er&population=20

Fetch countries by name and sort them:
GET http://localhost:8080/api/countries?name=er&sort=ascend

Fetch countries with population less than 10 million and limit to first 3 records:
GET http://localhost:8080/api/countries?population=10&limit=3

Fetch countries by name, population, sort them, and limit the records:
GET http://localhost:8080/api/countries?name=er&population=20&sort=ascend&limit=2

These examples should give you a comprehensive idea of how to interact with the service. Modify the query parameters as needed to get the data you require.